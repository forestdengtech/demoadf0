{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "asaworkspace459930"
		},
		"asacosmosdb01_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'asacosmosdb01'"
		},
		"asadatalake459930_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'asadatalake459930'"
		},
		"asastore459930_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'asastore459930'"
		},
		"asaworkspace459930-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'asaworkspace459930-WorkspaceDefaultSqlServer'"
		},
		"esbtestsynapse01-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'esbtestsynapse01-WorkspaceDefaultSqlServer'"
		},
		"sqlpool01_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'sqlpool01'"
		},
		"sqlpool01_highperf_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'sqlpool01_highperf'"
		},
		"sqlpool01_import01_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'sqlpool01_import01'"
		},
		"sqlpool01_workload01_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'sqlpool01_workload01'"
		},
		"sqlpool01_workload02_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'sqlpool01_workload02'"
		},
		"asadatalake459930_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://asadatalake459930.dfs.core.windows.net"
		},
		"asakeyvault459930_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://asakeyvault459930.vault.azure.net/"
		},
		"asaworkspace459930-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://asadatalake459930.dfs.core.windows.net"
		},
		"esbtestsynapse01-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://adlsesbtest.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/Lab 08 - Execute Business Analyst Queries')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Analyst",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@range(1,10)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Workload 2 for Data Analyst",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlDWSource",
											"sqlReaderQuery": "select count(X.A) from (\nselect CAST(CustomerId as nvarchar(20)) as A from wwi.SaleSmall) X where A like '%3%'",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "wwi02_sale_small_workload_02_asa",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2021-09-28T09:55:03Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/wwi02_sale_small_workload_02_asa')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Lab 08 - Execute Data Analyst and CEO Queries')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "CEO",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@range(1,20)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Workload 1 for CEO",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlDWSource",
											"sqlReaderQuery": "select count(X.A) from (\nselect CAST(CustomerId as nvarchar(20)) as A from wwi.SaleSmall) X where A like '%3%'",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "wwi02_sale_small_workload_01_asa",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							]
						}
					},
					{
						"name": "Analyst",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@range(1,20)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Workload 2 for Data Analyst",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlDWSource",
											"sqlReaderQuery": "select count(X.A) from (\nselect CAST(CustomerId as nvarchar(20)) as A from wwi.SaleSmall) X where A like '%3%'",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "wwi02_sale_small_workload_02_asa",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2021-09-25T16:21:16Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/wwi02_sale_small_workload_01_asa')]",
				"[concat(variables('workspaceId'), '/datasets/wwi02_sale_small_workload_02_asa')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Pipeline 1')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "campaign_analytics_data",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "asal400_lab2_writecampaignanalyticstoasa",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CampaignAnalytics": {},
									"CampaignAnalyticsASA": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "asadatalake459930",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 32,
								"computeType": "MemoryOptimized"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/asal400_lab2_writecampaignanalyticstoasa')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/linkedServices/asadatalake459930')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asal400_campaign_analytics_source')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "asadatalake459930",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "campaignanalytics.csv",
						"folderPath": "campaign-analytics",
						"fileSystem": "wwi-02"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asadatalake459930')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asal400_customerprofile_cosmosdb')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "asacosmosdb01",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "CosmosDbSqlApiCollection",
				"schema": {
					"type": "object",
					"properties": {
						"userId": {
							"type": "integer"
						},
						"cartId": {
							"type": "string"
						},
						"preferredProducts": {
							"type": "array",
							"items": {
								"type": "integer"
							}
						},
						"productReviews": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"productId": {
										"type": "integer"
									},
									"reviewText": {
										"type": "string"
									},
									"reviewDate": {
										"type": "string"
									}
								}
							}
						}
					}
				},
				"typeProperties": {
					"collectionName": "OnlineUserProfile01"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asacosmosdb01')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asal400_sales_adlsgen2')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "asadatalake459930",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "sale-small",
						"fileSystem": "wwi-02"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "TransactionId",
						"type": "UTF8"
					},
					{
						"name": "CustomerId",
						"type": "INT32"
					},
					{
						"name": "ProductId",
						"type": "INT_16"
					},
					{
						"name": "Quantity",
						"type": "INT_8"
					},
					{
						"name": "Price",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "TotalAmount",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "TransactionDate",
						"type": "INT32"
					},
					{
						"name": "ProfitAmount",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "Hour",
						"type": "INT_8"
					},
					{
						"name": "Minute",
						"type": "INT_8"
					},
					{
						"name": "StoreId",
						"type": "INT_16"
					},
					{
						"name": "Year",
						"type": "UTF8"
					},
					{
						"name": "Quarter",
						"type": "UTF8"
					},
					{
						"name": "Month",
						"type": "UTF8"
					},
					{
						"name": "Day",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asadatalake459930')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asal400_wwi_campaign_analytics_asa')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sqlpool01",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "Region",
						"type": "nvarchar"
					},
					{
						"name": "Country",
						"type": "nvarchar"
					},
					{
						"name": "ProductCategory",
						"type": "nvarchar"
					},
					{
						"name": "CampaignName",
						"type": "nvarchar"
					},
					{
						"name": "Revenue",
						"type": "decimal",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "RevenueTarget",
						"type": "decimal",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "City",
						"type": "nvarchar"
					},
					{
						"name": "State",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "wwi",
					"table": "CampaignAnalytics"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/sqlpool01')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asal400_wwi_userproductreviews_asa')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sqlpool01",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "UserId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ReviewText",
						"type": "nvarchar"
					},
					{
						"name": "ReviewDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "wwi",
					"table": "UserProductReviews"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/sqlpool01')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asal400_wwi_usertopproductpurchases_asa')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sqlpool01",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "UserId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ItemsPurchasedLast12Months",
						"type": "int",
						"precision": 10
					},
					{
						"name": "IsTopProduct",
						"type": "bit"
					},
					{
						"name": "IsPreferredProduct",
						"type": "bit"
					}
				],
				"typeProperties": {
					"schema": "wwi",
					"table": "UserTopProductPurchases"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/sqlpool01')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/wwi02_sale_small_workload_01_asa')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sqlpool01_workload01",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "TransactionId",
						"type": "uniqueidentifier"
					},
					{
						"name": "CustomerId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductId",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "Quantity",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "Price",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "TotalAmount",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "TransactionDateId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProfitAmount",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "Hour",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "Minute",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "StoreId",
						"type": "smallint",
						"precision": 5
					}
				],
				"typeProperties": {
					"schema": "wwi",
					"table": "SaleSmall"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/sqlpool01_workload01')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/wwi02_sale_small_workload_02_asa')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sqlpool01_workload02",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "TransactionId",
						"type": "uniqueidentifier"
					},
					{
						"name": "CustomerId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductId",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "Quantity",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "Price",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "TotalAmount",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "TransactionDateId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProfitAmount",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "Hour",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "Minute",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "StoreId",
						"type": "smallint",
						"precision": 5
					}
				],
				"typeProperties": {
					"schema": "wwi",
					"table": "SaleSmall"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/sqlpool01_workload02')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asacosmosdb01')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "CosmosDb",
				"typeProperties": {
					"connectionString": "[parameters('asacosmosdb01_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asadatalake459930')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('asadatalake459930_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('asadatalake459930_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asakeyvault459930')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('asakeyvault459930_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asastore459930')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('asastore459930_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asaworkspace459930-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('asaworkspace459930-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asaworkspace459930-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('asaworkspace459930-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/esbtestsynapse01-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('esbtestsynapse01-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/esbtestsynapse01-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('esbtestsynapse01-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sqlpool01')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('sqlpool01_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "asakeyvault459930",
							"type": "LinkedServiceReference"
						},
						"secretName": "SQL-USER-ASA"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asakeyvault459930')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sqlpool01_highperf')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('sqlpool01_highperf_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "asakeyvault459930",
							"type": "LinkedServiceReference"
						},
						"secretName": "SQL-USER-ASA"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asakeyvault459930')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sqlpool01_import01')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('sqlpool01_import01_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "asakeyvault459930",
							"type": "LinkedServiceReference"
						},
						"secretName": "SQL-USER-ASA"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asakeyvault459930')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sqlpool01_workload01')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('sqlpool01_workload01_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "asakeyvault459930",
							"type": "LinkedServiceReference"
						},
						"secretName": "SQL-USER-ASA"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asakeyvault459930')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sqlpool01_workload02')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('sqlpool01_workload02_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "asakeyvault459930",
							"type": "LinkedServiceReference"
						},
						"secretName": "SQL-USER-ASA"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asakeyvault459930')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0,
							"cleanup": true
						}
					}
				},
				"managedVirtualNetwork": {
					"type": "ManagedVirtualNetworkReference",
					"referenceName": "default"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureIntegrationRuntime01')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "MemoryOptimized",
							"coreCount": 16,
							"timeToLive": 60
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asal400_lab2_writecampaignanalyticstoasa')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "asal400_campaign_analytics_source",
								"type": "DatasetReference"
							},
							"name": "CampaignAnalytics"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "asal400_wwi_campaign_analytics_asa",
								"type": "DatasetReference"
							},
							"name": "CampaignAnalyticsASA"
						}
					],
					"transformations": [
						{
							"name": "MapCampaignAnalytics"
						},
						{
							"name": "ConvertColumnTypesAndValues"
						},
						{
							"name": "SelectCampaignAnalyticsColumns"
						}
					],
					"script": "source(output(\n\t\t{_col0_} as string,\n\t\t{_col1_} as string,\n\t\t{_col2_} as string,\n\t\t{_col3_} as string,\n\t\t{_col4_} as string,\n\t\t{_col5_} as double,\n\t\t{_col6_} as string,\n\t\t{_col7_} as double,\n\t\t{_col8_} as string,\n\t\t{_col9_} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tskipLines: 1) ~> CampaignAnalytics\nCampaignAnalytics select(mapColumn(\n\t\tRegion = {_col0_},\n\t\tCountry = {_col1_},\n\t\tProductCategory = {_col2_},\n\t\tCampaignName = {_col3_},\n\t\tRevenuePart1 = {_col4_},\n\t\tRevenue = {_col5_},\n\t\tRevenueTargetPart1 = {_col6_},\n\t\tRevenueTarget = {_col7_},\n\t\tCity = {_col8_},\n\t\tState = {_col9_}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> MapCampaignAnalytics\nMapCampaignAnalytics derive(Revenue = toDecimal(replace(concat(toString(RevenuePart1), toString(Revenue)), '\\\\', ''), 10, 2, '$###,###.##'),\n\t\tRevenueTarget = toDecimal(replace(concat(toString(RevenueTargetPart1), toString(RevenueTarget)), '\\\\', ''), 10, 2, '$###,###.##')) ~> ConvertColumnTypesAndValues\nConvertColumnTypesAndValues select(mapColumn(\n\t\tRegion,\n\t\tCountry,\n\t\tProductCategory,\n\t\tCampaignName,\n\t\tRevenue,\n\t\tRevenueTarget,\n\t\tCity,\n\t\tState\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectCampaignAnalyticsColumns\nSelectCampaignAnalyticsColumns sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tRegion as string,\n\t\tCountry as string,\n\t\tProductCategory as string,\n\t\tCampaignName as string,\n\t\tRevenue as decimal(10,2),\n\t\tRevenueTarget as decimal(10,2),\n\t\tCity as string,\n\t\tState as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> CampaignAnalyticsASA"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/asal400_campaign_analytics_source')]",
				"[concat(variables('workspaceId'), '/datasets/asal400_wwi_campaign_analytics_asa')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ASAL400 - Lab1 - Explore sales data')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT\n    TransactionDate, ProductId,\n        CAST(SUM(ProfitAmount) AS decimal(18,2)) AS [(sum) Profit],\n        CAST(AVG(ProfitAmount) AS decimal(18,2)) AS [(avg) Profit],\n        SUM(Quantity) AS [(sum) Quantity]\nFROM\n    OPENROWSET(\n        BULK 'https://asadatalake459930.dfs.core.windows.net/wwi-02/sale-small/Year=2016/Quarter=Q4/Month=12/Day=20161231/sale-small-20161231-snappy.parquet',\n        FORMAT='PARQUET'\n    ) AS [r] GROUP BY r.TransactionDate, r.ProductId;\n\nSELECT\n    COUNT(*)\nFROM\n    OPENROWSET(\n        BULK 'https://asadatalake459930.dfs.core.windows.net/wwi-02/sale-small/Year=2019/*/*/*/*',\n        FORMAT='PARQUET'\n    ) AS [r];\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ASAL400_Lab1_Data Integration P1')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE SCHEMA [wwi_staging];\n\nCREATE TABLE [wwi_staging].[SaleHeap]\n( \n    [TransactionId] [uniqueidentifier]  NOT NULL,\n    [CustomerId] [int]  NOT NULL,\n    [ProductId] [smallint]  NOT NULL,\n    [Quantity] [smallint]  NOT NULL,\n    [Price] [decimal](9,2)  NOT NULL,\n    [TotalAmount] [decimal](9,2)  NOT NULL,\n    [TransactionDate] [int]  NOT NULL,\n    [ProfitAmount] [decimal](9,2)  NOT NULL,\n    [Hour] [tinyint]  NOT NULL,\n    [Minute] [tinyint]  NOT NULL,\n    [StoreId] [smallint]  NOT NULL\n)\nWITH\n(\n    DISTRIBUTION = ROUND_ROBIN,\n    HEAP\n);\n\nCREATE TABLE [wwi_staging].[Sale]\n(\n    [TransactionId] [uniqueidentifier]  NOT NULL,\n    [CustomerId] [int]  NOT NULL,\n    [ProductId] [smallint]  NOT NULL,\n    [Quantity] [smallint]  NOT NULL,\n    [Price] [decimal](9,2)  NOT NULL,\n    [TotalAmount] [decimal](9,2)  NOT NULL,\n    [TransactionDate] [int]  NOT NULL,\n    [ProfitAmount] [decimal](9,2)  NOT NULL,\n    [Hour] [tinyint]  NOT NULL,\n    [Minute] [tinyint]  NOT NULL,\n    [StoreId] [smallint]  NOT NULL\n)\nWITH\n(\n    DISTRIBUTION = HASH ( [CustomerId] ),\n    CLUSTERED COLUMNSTORE INDEX,\n    PARTITION\n    (\n        [TransactionDaten    )\n);\n\nCREATE EXTERNAL DATA SOURCE ABSS\nWITH\n( TYPE = HADOOP,\n    LOCATION = 'abfss://wwi-02@asadatalake459930.dfs.core.windows.net'\n);\n\nCREATE EXTERNAL FILE FORMAT [ParquetFormat]\nWITH (\n    FORMAT_TYPE = PARQUET,\n    DATA_COMPRESSION = 'org.apache.hadoop.io.compress.SnappyCodec'\n);\nGO\n\nCREATE SCHEMA [wwi_external];\nGO\n\nCREATE EXTERNAL TABLE [wwi_external].Sales\n    (\n        [TransactionId] [nvarchar](36)  NOT NULL,\n        [CustomerId] [int]  NOT NULL,\n        [ProductId] [smallint]  NOT NULL,\n        [Quantity] [smallint]  NOT NULL,\n        [Price] [decimal](9,2)  NOT NULL,\n        [TotalAmount] [decimal](9,2)  NOT NULL,\n        [TransactionDate] [int]  NOT NULL,\n        [ProfitAmount] [decimal](9,2)  NOT NULL,\n        [Hour] [tinyint]  NOT NULL,\n        [Minute] [tinyint]  NOT NULL,\n        [StoreId] [smallint]  NOT NULL\n    )\nWITH\n    (\n        LOCATION = '/sale-small%2FYear%3D2019',  \n        DATA_SOURCE = ABSS,\n        FILE_FORMAT = [ParquetFormat]  \n    )  \nGO\n\nINSERT INTO [wwi_staging].[SaleHeap]\nSELECT *\nFROM [wwi_external].[Sales];\n\n--here\nSELECT COUNT(1) FROM wwi_staging.SaleHeap(nolock);\n\nTRUNCATE TABLE wwi_staging.SaleHeap;\nGO\n\n\nCOPY INTO wwi_staging.SaleHeap\nFROM 'https://asadatalake459930.dfs.core.windows.net/wwi-02/sale-small%2FYear%3D2019'\nWITH (\n    FILE_TYPE = 'PARQUET',\n    COMPRESSION = 'SNAPPY'\n)\nGO\n\n-- here - 12:07\nSELECT COUNT(1) FROM wwi_staging.SaleHeap(nolock);\n\nCOPY INTO wwi_staging.Sale\nFROM 'https://asadatalake459930.dfs.core.windows.net/wwi-02/sale-small%2FYear%3D2019'\nWITH (\n    FILE_TYPE = 'PARQUET',\n    COMPRESSION = 'SNAPPY'\n)\nGO\n\nIF NOT EXISTS (SELECT * FROM sys.workload_management_workload_classifiers WHERE group_name = 'BigDataLoad')\nBEGIN\n    CREATE WORKLOAD GROUP BigDataLoad WITH  \n    (\n        MIN_PERCENTAGE_RESOURCE = 50 -- integer value\n        ,REQUEST_MIN_RESOURCE_GRANT_PERCENT = 25 --  (guaranteed a minimum of 4 concurrency)\n        ,CAP_PERCENTAGE_RESOURCE = 100\n    );\nEND\n\nIF NOT EXISTS (SELECT * FROM sys.workload_management_workload_classifiers WHERE [name] = 'HeavyLoader')\nBEGIN\n    CREATE WORKLOAD Classifier HeavyLoader WITH\n    (\n        Workload_Group ='BigDataLoad',\n        MemberName='asa.sql.import01',\n        IMPORTANCE = HIGH\n    );\nEND\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SQLPool01",
						"poolName": "SQLPool01"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Activity 03 - Data Warehouse Optimization')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT\r\n    FS.CustomerID\r\n    ,MIN(FS.Quantity) as MinQuantity\r\n    ,MAX(FS.Quantity) as MaxQuantity\r\n    ,AVG(FS.Price) as AvgPrice\r\n    ,AVG(FS.TotalAmount) as AvgTotalAmount\r\n    ,AVG(FS.ProfitAmount) as AvgProfitAmount\r\n    ,COUNT(DISTINCT FS.StoreId) as DistinctStores\r\nFROM\r\n    wwi_perf.Sale_Heap FS\r\nGROUP BY\r\n    FS.CustomerId",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "SQLPool01",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Lab 05 - Exercise 3 - Column Level Security')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "    /*  Column-level security feature in Azure Synapse simplifies the design and coding of security in application.\r\n        It ensures column level security by restricting column access to protect sensitive data. */\r\n\r\n    /* Scenario: In this scenario we will be working with two users. The first one is the CEO, he has access to all\r\n        data. The second one is DataAnalystMiami, this user doesn't have access to the confidential Revenue column\r\n        in the Sales table. Follow this lab, one step at a time to see how Column-level security removes access to the\r\n        Revenue column to DataAnalystMiami */\r\n\r\n    --Step 1: Let us see how this feature in Azure Synapse works. Before that let us have a look at the Campaign table.\r\n    select  Top 100 * from wwi_Security.Sale\r\n    where City is not null and state is not null\r\n\r\n    /*  Consider a scenario where there are two users.\r\n        A CEO, who is an authorized  personnel with access to all the information in the database\r\n        and a Data Analyst, to whom only required information should be presented.*/\r\n\r\n    -- Step:2 Verify the existence of the 'CEO' and 'DataAnalystMiami' users in the Datawarehouse.\r\n    SELECT Name as [User1] FROM sys.sysusers WHERE name = N'CEO';\r\n    SELECT Name as [User2] FROM sys.sysusers WHERE name = N'DataAnalystMiami';\r\n\r\n\r\n    -- Step:3 Now let us enforce column level security for the DataAnalystMiami.\r\n    /*  The Sales table in the warehouse has information like ProductID, Analyst, Product, CampaignName, Quantity, Region, State, City, RevenueTarget and Revenue.\r\n        The Revenue generated from every campaign is classified and should be hidden from DataAnalystMiami.\r\n    */\r\n\r\n    REVOKE SELECT ON wwi_security.Sale FROM DataAnalystMiami;\r\n    GRANT SELECT ON wwi_security.Sale([ProductID], [Analyst], [Product], [CampaignName],[Quantity], [Region], [State], [City], [RevenueTarget]) TO DataAnalystMiami;\r\n    -- This provides DataAnalystMiami access to all the columns of the Sale table but Revenue.\r\n\r\n    -- Step:4 Then, to check if the security has been enforced, we execute the following query with current User As 'DataAnalystMiami', this will result in an error\r\n    --  since DataAnalystMiami doesn't have select access to the Revenue column\r\n    EXECUTE AS USER ='DataAnalystMiami';\r\n    select TOP 100 * from wwi_security.Sale;\r\n    ---\r\n    -- The following query will succeed since we are not including the Revenue column in the query.\r\n    EXECUTE AS USER ='DataAnalystMiami';\r\n    select [ProductID], [Analyst], [Product], [CampaignName],[Quantity], [Region], [State], [City], [RevenueTarget] from wwi_security.Sale;\r\n    \r\n    -- Step:5 Whereas, the CEO of the company should be authorized with all the information present in the warehouse.To do so, we execute the following query.\r\n    Revert;\r\n    GRANT SELECT ON wwi_security.Sale TO CEO;  --Full access to all columns.\r\n\r\n    -- Step:6 Let us check if our CEO user can see all the information that is present. Assign Current User As 'CEO' and the execute the query\r\n    EXECUTE AS USER ='CEO'\r\n    select * from wwi_security.Sale\r\n    Revert;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "SQLPool01",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Lab 05 - Exercise 3 - Dynamic Data Masking')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "    -------------------------------------------------------------------------Dynamic Data Masking (DDM)----------------------------------------------------------------------------------------------------------\r\n    /*  Dynamic data masking helps prevent unauthorized access to sensitive data by enabling customers\r\n        to designate how much of the sensitive data to reveal with minimal impact on the application layer.\r\n        Let see how */\r\n\r\n    /* Scenario: WWI has identified sensitive information in the CustomerInfo table. They would like us to \r\n        obfuscate the CreditCard and Email columns of the CustomerInfo table to DataAnalysts */\r\n\r\n    -- Step:1 Let us first get a view of CustomerInfo table.\r\n    SELECT TOP (100) * FROM wwi_security.CustomerInfo;\r\n\r\n    -- Step:2 Let's confirm that there are no Dynamic Data Masking (DDM) applied on columns.\r\n    SELECT c.name, tbl.name as table_name, c.is_masked, c.masking_function  \r\n    FROM sys.masked_columns AS c  \r\n    JOIN sys.tables AS tbl\r\n        ON c.[object_id] = tbl.[object_id]  \r\n    WHERE is_masked = 1\r\n        AND tbl.name = 'CustomerInfo';\r\n    -- No results returned verify that no data masking has been done yet.\r\n\r\n    -- Step:3 Now lets mask 'CreditCard' and 'Email' Column of 'CustomerInfo' table.\r\n    ALTER TABLE wwi_security.CustomerInfo  \r\n    ALTER COLUMN [CreditCard] ADD MASKED WITH (FUNCTION = 'partial(0,\"XXXX-XXXX-XXXX-\",4)');\r\n    GO\r\n    ALTER TABLE wwi_security.CustomerInfo\r\n    ALTER COLUMN Email ADD MASKED WITH (FUNCTION = 'email()');\r\n    GO\r\n    -- The columns are sucessfully masked.\r\n\r\n    -- Step:4 Let's see Dynamic Data Masking (DDM) applied on the two columns.\r\n    SELECT c.name, tbl.name as table_name, c.is_masked, c.masking_function  \r\n    FROM sys.masked_columns AS c  \r\n    JOIN sys.tables AS tbl\r\n        ON c.[object_id] = tbl.[object_id]  \r\n    WHERE is_masked = 1\r\n        AND tbl.name ='CustomerInfo';\r\n\r\n    -- Step:5 Now, let us grant SELECT permission to 'DataAnalystMiami' on the 'CustomerInfo' table.\r\n   GRANT SELECT ON wwi_security.CustomerInfo TO DataAnalystMiami;  \r\n\r\n    -- Step:6 Logged in as  'DataAnalystMiami' let us execute the select query and view the result.\r\n    EXECUTE AS USER = 'DataAnalystMiami';  \r\n    SELECT * FROM wwi_security.CustomerInfo;\r\n\r\n    -- Step:7 Let us remove the data masking using UNMASK permission\r\n    GRANT UNMASK TO DataAnalystMiami;\r\n    EXECUTE AS USER = 'DataAnalystMiami';  \r\n    SELECT *\r\n    FROM wwi_security.CustomerInfo;\r\n    revert;\r\n    REVOKE UNMASK TO DataAnalystMiami;  \r\n\r\n    ----step:8 Reverting all the changes back to as it was.\r\n    ALTER TABLE wwi_security.CustomerInfo\r\n    ALTER COLUMN CreditCard DROP MASKED;\r\n    GO\r\n    ALTER TABLE wwi_security.CustomerInfo\r\n    ALTER COLUMN Email DROP MASKED;\r\n    GO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "SQLPool01",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Lab 05 - Exercise 3 - Row Level Security')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "/*\tRow level Security (RLS) in Azure Synapse enables us to use group membership to control access to rows in a table.\r\n\tAzure Synapse applies the access restriction every time the data access is attempted from any user. \r\n\tLet see how we can implement row level security in Azure Synapse.*/\r\n\r\n----------------------------------Row-Level Security (RLS), 1: Filter predicates------------------------------------------------------------------\r\n-- Step:1 The Sale table has two Analyst values: DataAnalystMiami and DataAnalystSanDiego. \r\n--     Each analyst has jurisdiction across a specific Region. DataAnalystMiami on the South East Region\r\n--      and DataAnalystSanDiego on the Far West region.\r\nSELECT DISTINCT Analyst, Region FROM wwi_security.Sale order by Analyst ;\r\n\r\n/* Scenario: WWI requires that an Analyst only see the data for their own data from their own region. The CEO should see ALL data.\r\n    In the Sale table, there is an Analyst column that we can use to filter data to a specific Analyst value. */\r\n\r\n/* We will define this filter using what is called a Security Predicate. This is an inline table-valued function that allows\r\n    us to evaluate additional logic, in this case determining if the Analyst executing the query is the same as the Analyst\r\n    specified in the Analyst column in the row. The function returns 1 (will return the row) when a row in the Analyst column is the same as the \r\n    user executing the query (@Analyst = USER_NAME()) or if the user executing the query is the CEO user (USER_NAME() = 'CEO')\r\n    whom has access to all data.\r\n*/\r\n\r\n-- Review any existing security predicates in the database\r\nSELECT * FROM sys.security_predicates\r\n\r\n--Step:2 Create a new Schema to hold the security predicate, then define the predicate function. It returns 1 (or True) when\r\n--  a row should be returned in the parent query.\r\nGO\r\n\r\nCREATE FUNCTION wwi_security.fn_securitypredicate(@Analyst AS sysname)  \r\n    RETURNS TABLE  \r\nWITH SCHEMABINDING  \r\nAS  \r\n    RETURN SELECT 1 AS fn_securitypredicate_result\r\n    WHERE @Analyst = USER_NAME() OR USER_NAME() = 'CEO'\r\nGO\r\n-- Now we define security policy that adds the filter predicate to the Sale table. This will filter rows based on their login name.\r\nCREATE SECURITY POLICY SalesFilter  \r\nADD FILTER PREDICATE wwi_security.fn_securitypredicate(Analyst)\r\nON wwi_security.Sale\r\nWITH (STATE = ON);\r\n\r\n------ Allow SELECT permissions to the Sale Table.------\r\nGRANT SELECT ON wwi_security.Sale TO CEO, DataAnalystMiami, DataAnalystSanDiego;\r\n\r\n-- Step:3 Let us now test the filtering predicate, by selecting data from the Sale table as 'DataAnalystMiami' user.\r\nEXECUTE AS USER = 'DataAnalystMiami' \r\nSELECT * FROM wwi_security.Sale;\r\nrevert;\r\n-- As we can see, the query has returned rows here Login name is DataAnalystMiami\r\n\r\n-- Step:4 Let us test the same for  'DataAnalystSanDiego' user.\r\nEXECUTE AS USER = 'DataAnalystSanDiego';\r\nSELECT * FROM wwi_security.Sale;\r\nrevert;\r\n-- RLS is working indeed.\r\n\r\n-- Step:5 The CEO should be able to see all rows in the table.\r\nEXECUTE AS USER = 'CEO';  \r\nSELECT * FROM wwi_security.Sale;\r\nrevert;\r\n-- And he can.\r\n\r\n--Step:6 To disable the security policy we just created above, we execute the following.\r\nALTER SECURITY POLICY SalesFilter  \r\nWITH (STATE = OFF);\r\n\r\nDROP SECURITY POLICY SalesFilter;\r\nDROP FUNCTION wwi_security.fn_securitypredicate;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "SQLPool01",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 2')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE TABLE [wwi].[CampaignAnalytics]\n(\n    [Region] [nvarchar](50)  NOT NULL,\n    [Country] [nvarchar](30)  NOT NULL,\n    [ProductCategory] [nvarchar](50)  NOT NULL,\n    [CampaignName] [nvarchar](500)  NOT NULL,\n    [Revenue] [decimal](10,2)  NULL,\n    [RevenueTarget] [decimal](10,2)  NULL,\n    [City] [nvarchar](50)  NULL,\n    [State] [nvarchar](25)  NULL\n)\nWITH\n(\n    DISTRIBUTION = HASH ( [Region] ),\n    CLUSTERED COLUMNSTORE INDEX\n);\n\nCREATE TABLE [wwi].[Sale]\n(\n    [TransactionId] [uniqueidentifier]  NOT NULL,\n    [CustomerId] [int]  NOT NULL,\n    [ProductId] [smallint]  NOT NULL,\n    [Quantity] [smallint]  NOT NULL,\n    [Price] [decimal](9,2)  NOT NULL,\n    [TotalAmount] [decimal](9,2)  NOT NULL,\n    [TransactionDate] [int]  NOT NULL,\n    [ProfitAmount] [decimal](9,2)  NOT NULL,\n    [Hour] [tinyint]  NOT NULL,\n    [Minute] [tinyint]  NOT NULL,\n    [StoreId] [smallint]  NOT NULL\n)\nWITH\n(\n    DISTRIBUTION = HASH ( [CustomerId] ),\n    CLUSTERED COLUMNSTORE INDEX,\n    PARTITION\n    (\n        [TransactionDaten    )\n);\n\nCREATE TABLE [wwi].[UserProductReviews]\n(\n    [UserId] [int]  NOT NULL,\n    [ProductId] [int]  NOT NULL,\n    [ReviewText] [nvarchar](1000)  NOT NULL,\n    [ReviewDate] [datetime]  NOT NULL\n)\nWITH\n(\n    DISTRIBUTION = HASH ( [ProductId] ),\n    CLUSTERED COLUMNSTORE INDEX\n);\n\nCREATE TABLE [wwi].[UserTopProductPurchases]\n(\n    [UserId] [int]  NOT NULL,\n    [ProductId] [int]  NOT NULL,\n    [ItemsPurchasedLast12Months] [int]  NULL,\n    [IsTopProduct] [bit]  NOT NULL,\n    [IsPreferredProduct] [bit]  NOT NULL\n)\nWITH\n(\n    DISTRIBUTION = HASH ( [UserId] ),\n    CLUSTERED COLUMNSTORE INDEX\n);\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SQLPool01",
						"poolName": "SQLPool01"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Activity 05 - Model Training')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool01",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {}
				},
				"metadata": {
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/3941d4c0-fdec-4aa0-9d9a-80436df48f39/resourceGroups/Synapse-WS-L400-459930/providers/Microsoft.Synapse/workspaces/asaworkspace459930/bigDataPools/SparkPool01",
						"name": "SparkPool01",
						"type": "Spark",
						"endpoint": "https://asaworkspace459930.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool01",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					}
				},
				"cells": [
					{
						"cell_type": "markdown",
						"source": [
							"# Model training and registration\n",
							"This notebook show the process for training the model, converting the model to ONNX and uploading the ONNX model to Azure Storage."
						]
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Explore the training data\n",
							"The following cells load the source CSV file into a Spark DataFrame and create a temporary view that can be used to query the data with Spark SQL.\n",
							"\n",
							"WWI has provided a small CSV file you can use for showing the process of training a simple model.\n",
							"\n",
							"They have already loaded for you in the data lake. \n",
							"It is located under the `wwi-02` container with the path `/sale-csv/wwi-factsale.csv`.\n",
							"You need to build the correct path to the file and the run the cells that follow to load and query the data.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"df = spark.read.load('abfss://<REPLACE-WITH-YOUR-PATH>', format=\"csv\"\n",
							", header=True, sep=\"|\"\n",
							")"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"source": [
							"Next, WWI would like you to show them how create a temporary view over the loaded dataframe.\n",
							"\n",
							"The view should be named `facts`.\n",
							"\n",
							"Complete the code in the cell and run it.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"df.#<- can you complete this?"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"source": [
							"In the next cell, WWI would like you to explore the data with an initial query.\n",
							"\n",
							"You want to preview all of the sales having the `Customer Key` of `11`.\n",
							"\n",
							"You should order the results by `Stock Item Key`.\n"
						]
					},
					{
						"cell_type": "code",
						"source": [
							"spark.sql(\"<INSERT YOUR SQL QUERY HERE>\").show()"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Predict Quantity given Customer Key and Stock Item Key\n",
							"In the following cells we load a subset of the data that just contains the fields needed for training. \n",
							"\n",
							"WWI's data scientists have already provided some of the code for you. \n",
							"\n",
							"Read thru and run the following cells.\n",
							"\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"from pyspark.sql.functions import col\n",
							"df3 = spark.sql(\"SELECT double(`Customer Key`) as customerkey, double(`Stock Item Key`) as stockitemkey, double(`Quantity`) as quantity FROM facts\").where(col(\"quantity\").isNotNull())\n",
							"df3.cache()"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"source": [
							"Next, we package the data into the format expected by Spark ML's LinearRegression. It requires a DataFrame with two columns- `features` and a column with the labels to predict (`quantity` in this case).\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"from pyspark.ml.feature import VectorAssembler\n",
							"\n",
							"vectorAssembler = VectorAssembler(inputCols = ['customerkey', 'stockitemkey'], outputCol = 'features')\n",
							"df4 = vectorAssembler.transform(df3)\n",
							"df5 = df4.select(['features', 'quantity'])\n",
							"df5.show(10)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"source": [
							"Now, we split our DataFrame into training and testing DataFrames.\n",
							""
						]
					},
					{
						"cell_type": "markdown",
						"source": [
							"A best practice is to split data into training and test sets.\n",
							"\n",
							"WWI would like you to complete the final line that produces the train and test dataframes. \n",
							"\n",
							"Once you have completed the cell, run it.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"trainingFraction = 0.7\n",
							"testingFraction = (1-trainingFraction)\n",
							"seed = 42\n",
							"\n",
							"# Split the dataframe into test and training dataframes\n",
							"df_train, df_test = # use df5 to create the two dataframes"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"source": [
							"In the following cell, you will train your LinearRegression model.\n",
							"\n",
							"The goal of this regressor is to predict the `quantity` field given all of the features. \n",
							"\n",
							"Complete the missing parameters and the last line to train the model.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"from pyspark.ml.regression import LinearRegression\n",
							"\n",
							"lin_reg = LinearRegression(featuresCol = '<REPLACE WITH YOUR ANSWER>', labelCol='<REPLACE WITH YOUR ANSWER>', maxIter = 10, regParam=0.3)\n",
							"lin_reg_model = # complete this line, using df_train to train the linear regression model "
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"source": [
							"Now that you have a trained model in hand, WWI wants to verify you can use it to make predictions against the test DataFrame.\n",
							"\n",
							"Complete the first line to use your trained model to make predictions against the `df_test` dataframe.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"df_pred = #<-complete this to use your model to make predictions against df_test \n",
							"display(df_pred)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Convert model to ONNX\n",
							"In the cells that follow, WWI wants you to show how you convert the model to ONNX and show how an output of how ONNX represents the Spark ML model.\n",
							"\n",
							"They have already provided you the code, you just need to run the cells.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"from onnxmltools import convert_sparkml\n",
							"from onnxmltools.convert.common.data_types import FloatTensorType\n",
							"\n",
							"initial_types = [ \n",
							"    (\"features\", FloatTensorType([1, lin_reg_model.numFeatures])),\n",
							"    # (repeat for the required inputs)\n",
							"]"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"model_onnx = convert_sparkml(lin_reg_model, 'sparkml GeneralizedLinearRegression', initial_types)\n",
							"model_onnx"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Upload the model to Azure Storage\n",
							"\n",
							"In order for an ONNX model to be used by the T-SQL predict statement, it must be uploaded to Azure Storage.\n",
							"\n",
							"WWI wants you to show them how they would serialize the model to disk and then upload the model file to Azure Storage.\n",
							"\n",
							"Run the following cell to save  the ONNX model to the storage of the Spark driver node temporarily. "
						]
					},
					{
						"cell_type": "code",
						"source": [
							"with open(\"model.onnx\", \"wb\") as f:\n",
							"    f.write(model_onnx.SerializeToString())"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"source": [
							"Next, you need to show WWI how to use mssparkutils to upload the ONNX model to Azure Storage.\n"
						]
					},
					{
						"cell_type": "code",
						"source": [
							"modelPath = 'abfss://wwi-02@asadatalake459930.dfs.core.windows.net/ml/onnx/product_seasonality_classifier.onnx'\n",
							"modelString = str(model_onnx.SerializeToString())\n",
							"mssparkutils.fs.put(modelPath, modelString)\n"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Experimenting with dotNET for Spark Using CreateDataFrame')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_sparkdotnet",
						"display_name": "Synapse SparkDotNet"
					},
					"language_info": {
						"name": "csharp"
					}
				},
				"cells": [
					{
						"cell_type": "markdown",
						"source": [
							"# Experimenting with .NET for Apache Spark Using the CreateDataFrame API\n",
							"\n",
							"A Spark DataFrame is a distributed collection of data organized into named columns that provides operations to filter, group, or compute aggregates, and can be used with Spark SQL. It is conceptually equivalent to a table in a relational database or a data frame in R/Python, but with richer optimizations under the hood. \n",
							"\n",
							"DataFrames can be constructed from structured data files, existing RDDs, tables in Hive, or external databases.\n",
							"Another way of creating Spark Dataframes is by using the `CreateDataFrame` API that takes in data in the form of List of Row objects along with the schema and returns a `DataFrame` object. Let's look at a simple example below:\n",
							""
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"source": [
							"using Microsoft.Spark.Sql.Types;\n",
							"\n",
							"// List of GenericRow objects that contain the data for each row of the DataFrame\n",
							"var data = new List<GenericRow>();\n",
							"data.Add(new GenericRow(new object[] { \"Alice\", 20 }));\n",
							"data.Add(new GenericRow(new object[] { \"Bob\", 30}));\n",
							"\n",
							"// Schema of the DataFrame\n",
							"var schema = new StructType(new List<StructField>()\n",
							"{\n",
							"    new StructField(\"Name\", new StringType()),\n",
							"    new StructField(\"Age\", new IntegerType())\n",
							"});\n",
							"\n",
							"// Calling CreateDataFrame with the data and schema\n",
							"DataFrame df = spark.CreateDataFrame(data, schema);\n",
							"\n",
							"// Displaying the returned dataframe\n",
							"df.Show();"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "markdown",
						"source": [
							"## A more real-life example\n",
							"\n",
							"Now let's take a look at a more complex example closer to a real-life use case.\n",
							""
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"source": [
							"using Microsoft.Spark.Sql.Types;\n",
							"\n",
							"// Data as list of Rows\n",
							"var searchlogData = new List<GenericRow>();\n",
							"searchlogData.Add(new GenericRow(new object[] {399266 , \"2019-10-15T11:53:04Z\" , \"en-us\" , \"how to make nachos\" , 73 , \"www.nachos.com;www.wikipedia.com\" , \"NULL\"})); \n",
							"searchlogData.Add(new GenericRow(new object[] {382045 , \"2019-10-15T11:53:25Z\" , \"en-gb\" , \"best ski resorts\" , 614 , \"skiresorts.com;ski-europe.com;www.travelersdigest.com/ski_resorts.htm\" , \"ski-europe.com;www.travelersdigest.com/ski_resorts.htm\"})); \n",
							"searchlogData.Add(new GenericRow(new object[] {382045 , \"2019-10-16T11:53:42Z\" , \"en-gb\" , \"broken leg\" , 74 , \"mayoclinic.com/health;webmd.com/a-to-z-guides;mybrokenleg.com;wikipedia.com/Bone_fracture\" , \"mayoclinic.com/health;webmd.com/a-to-z-guides;mybrokenleg.com;wikipedia.com/Bone_fracture\"}));\n",
							"searchlogData.Add(new GenericRow(new object[] {106479 , \"2019-10-16T11:53:10Z\" , \"en-ca\" , \"south park episodes\" , 24 , \"southparkstudios.com;wikipedia.org/wiki/Sout_Park;imdb.com/title/tt0121955;simon.com/mall\" , \"southparkstudios.com\"}));\n",
							"searchlogData.Add(new GenericRow(new object[] {906441 , \"2019-10-16T11:54:18Z\" , \"en-us\" , \"cosmos\" , 1213 , \"cosmos.com;wikipedia.org/wiki/Cosmos:_A_Personal_Voyage;hulu.com/cosmos\" , \"NULL\"}));\n",
							"searchlogData.Add(new GenericRow(new object[] {351530 , \"2019-10-16T11:54:29Z\" , \"en-fr\" , \"microsoft\" , 241 , \"microsoft.com;wikipedia.org/wiki/Microsoft;xbox.com\" , \"NULL\"}));\n",
							"searchlogData.Add(new GenericRow(new object[] {640806 , \"2019-10-16T11:54:32Z\" , \"en-us\" , \"wireless headphones\" , 502 , \"www.amazon.com;reviews.cnet.com/wireless-headphones;store.apple.com\" , \"www.amazon.com;store.apple.com\"}));\n",
							"searchlogData.Add(new GenericRow(new object[] {304305 , \"2019-10-16T11:54:45Z\" , \"en-us\" , \"dominos pizza\" , 60 , \"dominos.com;wikipedia.org/wiki/Domino's_Pizza;facebook.com/dominos\" , \"dominos.com\"})); \n",
							"searchlogData.Add(new GenericRow(new object[] {460748 , \"2019-10-16T11:54:58Z\" , \"en-us\" , \"yelp\" , 1270 , \"yelp.com;apple.com/us/app/yelp;wikipedia.org/wiki/Yelp_Inc.;facebook.com/yelp\" , \"yelp.com\"}));\n",
							"searchlogData.Add(new GenericRow(new object[] {354841 , \"2019-10-16T11:59:00Z\" , \"en-us\" , \"how to run\" , 610 , \"running.about.com;ehow.com;go.com\" , \"running.about.com;ehow.com\"}));\n",
							"searchlogData.Add(new GenericRow(new object[] {354068 , \"2019-10-16T12:00:07Z\" , \"en-mx\" , \"what is sql\" , 422 , \"wikipedia.org/wiki/SQL;sqlcourse.com/intro.html;wikipedia.org/wiki/Microsoft_SQL\" , \"wikipedia.org/wiki/SQL\"}));\n",
							"searchlogData.Add(new GenericRow(new object[] {674364 , \"2019-10-16T12:00:21Z\" , \"en-us\" , \"mexican food redmond\" , 283 , \"eltoreador.com;yelp.com/c/redmond-wa/mexican;agaverest.com\" , \"NULL\"}));\n",
							"searchlogData.Add(new GenericRow(new object[] {347413 , \"2019-10-16T12:11:34Z\" , \"en-gr\" , \"microsoft\" , 305 , \"microsoft.com;wikipedia.org/wiki/Microsoft;xbox.com\" , \"NULL\"}));\n",
							"searchlogData.Add(new GenericRow(new object[] {848434 , \"2019-10-16T12:12:14Z\" , \"en-ch\" , \"facebook\" , 10 , \"facebook.com;facebook.com/login;wikipedia.org/wiki/Facebook\" , \"facebook.com\"}));\n",
							"searchlogData.Add(new GenericRow(new object[] {604846 , \"2019-10-16T12:13:18Z\" , \"en-us\" , \"wikipedia\" , 612 , \"wikipedia.org;en.wikipedia.org;en.wikipedia.org/wiki/Wikipedia\" , \"wikipedia.org\"}));\n",
							"searchlogData.Add(new GenericRow(new object[] {840614 , \"2019-10-16T12:13:41Z\" , \"en-us\" , \"xbox\" , 1220 , \"xbox.com;en.wikipedia.org/wiki/Xbox;xbox.com/xbox360\" , \"xbox.com/xbox360\"}));\n",
							"searchlogData.Add(new GenericRow(new object[] {656666 , \"2019-10-16T12:15:19Z\" , \"en-us\" , \"hotmail\" , 691 , \"hotmail.com;login.live.com;msn.com;en.wikipedia.org/wiki/Hotmail\" , \"NULL\"}));\n",
							"searchlogData.Add(new GenericRow(new object[] {951513 , \"2019-10-16T12:17:37Z\" , \"en-us\" , \"pokemon\" , 63 , \"pokemon.com;pokemon.com/us;serebii.net\" , \"pokemon.com\"}));\n",
							"searchlogData.Add(new GenericRow(new object[] {350350 , \"2019-10-16T12:18:17Z\" , \"en-us\" , \"wolfram\" , 30 , \"wolframalpha.com;wolfram.com;mathworld.wolfram.com;en.wikipedia.org/wiki/Stephen_Wolfram\" , \"NULL\"}));\n",
							"searchlogData.Add(new GenericRow(new object[] {641615 , \"2019-10-16T12:19:21Z\" , \"en-us\" , \"kahn\" , 119 , \"khanacademy.org;en.wikipedia.org/wiki/Khan_(title);answers.com/topic/genghis-khan;en.wikipedia.org/wiki/Khan_(name)\" , \"khanacademy.org\"}));\n",
							"searchlogData.Add(new GenericRow(new object[] {321065 , \"2019-10-16T12:20:19Z\" , \"en-us\" , \"clothes\" , 732 , \"gap.com;overstock.com;forever21.com;footballfanatics.com/college_washington_state_cougars\" , \"footballfanatics.com/college_washington_state_cougars\"}));\n",
							"searchlogData.Add(new GenericRow(new object[] {651777 , \"2019-10-16T12:20:49Z\" , \"en-us\" , \"food recipes\" , 183 , \"allrecipes.com;foodnetwork.com;simplyrecipes.com\" , \"foodnetwork.com\"}));\n",
							"searchlogData.Add(new GenericRow(new object[] {666352 , \"2019-10-16T12:21:16Z\" , \"en-us\" , \"weight loss\" , 630 , \"en.wikipedia.org/wiki/Weight_loss;webmd.com/diet;exercise.about.com\" , \"webmd.com/diet\"}));\n",
							"\n",
							"// Schema for the above data\n",
							"// For a full list of types you can use, please see the following link:\n",
							"// https://docs.microsoft.com/en-us/dotnet/api/microsoft.spark.sql.types?view=spark-dotnet\n",
							"var searchlogSchema = new StructType(new List<StructField>()\n",
							"            { \n",
							"                new StructField(\"Id\", new IntegerType()),\n",
							"                new StructField(\"Time\", new StringType()),\n",
							"                new StructField(\"Market\", new StringType()),\n",
							"                new StructField(\"Searchtext\", new StringType()),\n",
							"                new StructField(\"Latency\", new IntegerType()),\n",
							"                new StructField(\"Links\", new StringType()),\n",
							"                new StructField(\"Clickedlinks\", new StringType())\n",
							"            });\n",
							" \n",
							" // Creating a DataFrame using the above data and schema as input to the CreateDataFrame API\n",
							"DataFrame dfSearchlog = spark.CreateDataFrame(searchlogData, searchlogSchema);\n",
							"\n",
							"// Displaying the created DataFrame\n",
							"dfSearchlog.Show()"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Casting String type to Timestamp type\n",
							"\n",
							"We will now convert the Column `Time` which is currently of `StringType()` to `TimeStamp()` type using the `Column.Cast()` method.\n",
							""
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"source": [
							"// Function to convert the Time column from StringType to TimestampType\n",
							"public DataFrame CastColumn(DataFrame df_, string colName, string t)\n",
							"{\n",
							"    df_ = df_.WithColumn(\"NewCol__\", df_[colName].Cast(t));\n",
							"    df_ = df_.Drop(colName);\n",
							"    df_ = df_.WithColumnRenamed(\"NewCol__\", colName);\n",
							"    return df_;\n",
							"}\n",
							"\n",
							"// Calling castColumn function to return the new DataFrame\n",
							"DataFrame dfTimestampCast = CastColumn(dfSearchlog, \"Time\", \"timestamp\");\n",
							"\n",
							"// Display the new DataFrame\n",
							"dfTimestampCast.Show();"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 3
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Lab 06 - Machine Learning')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool01",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {}
				},
				"metadata": {
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/3941d4c0-fdec-4aa0-9d9a-80436df48f39/resourceGroups/Synapse-WS-L400-459930/providers/Microsoft.Synapse/workspaces/asaworkspace459930/bigDataPools/SparkPool01",
						"name": "SparkPool01",
						"type": "Spark",
						"endpoint": "https://asaworkspace459930.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool01",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					}
				},
				"cells": [
					{
						"cell_type": "markdown",
						"source": [
							"# Train a classifier to determine product seasonality\n",
							""
						]
					},
					{
						"cell_type": "markdown",
						"source": [
							"See installed packages\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"import pkg_resources\n",
							"for d in pkg_resources.working_set:\n",
							"     print(d)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"source": [
							"Import all necessary libraries.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"from sklearn.preprocessing import StandardScaler, MinMaxScaler, Normalizer\n",
							"from sklearn.decomposition import PCA\n",
							"from sklearn.model_selection import train_test_split\n",
							"from sklearn.metrics import accuracy_score\n",
							"\n",
							"from xgboost import XGBClassifier\n",
							"\n",
							"from onnxmltools.convert import convert_xgboost\n",
							"from onnxmltools.convert.common.data_types import FloatTensorType\n",
							"\n",
							"import numpy as np\n",
							"import pandas as pd\n",
							"import matplotlib.pyplot as plt"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Exploratory data analysis (basic stats)\n",
							"\n",
							"Create Spark temporary views for sales and products.\n",
							"\n",
							"**IMPORTANT!** Make sure the name of the SQL pool (`SQLPool01` below) matches the name of your SQL pool.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [
										"Seasonality"
									],
									"values": [
										"ProductId"
									],
									"yLabel": "ProductId",
									"xLabel": "Seasonality",
									"aggregation": "SUM",
									"aggByBackend": false
								},
								"aggData": "{\"ProductId\":{\"1\":771373,\"2\":247930,\"3\":262978}}",
								"isSummary": false,
								"previewData": {
									"filter": null
								},
								"isSql": false
							}
						},
						"source": [
							"%%spark\n",
							"val df = spark.read.sqlanalytics(\"SQLPool01.wwi.SaleSmall\") \n",
							"df.createOrReplaceTempView(\"sale\")\n",
							"\n",
							"val df2 = spark.read.sqlanalytics(\"SQLPool01.wwi.Product\") \n",
							"df2.createOrReplaceTempView(\"product\")\n",
							"display(df2)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"source": [
							"Load daily product sales from the SQL pool.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"sqlQuery = \"\"\"\n",
							"SELECT\n",
							"    P.ProductId\n",
							"    ,P.Seasonality\n",
							"    ,S.TransactionDateId\n",
							"    ,COUNT(*) as TransactionItemsCount\n",
							"FROM\n",
							"    sale S\n",
							"    JOIN product P ON\n",
							"        S.ProductId = P.ProductId\n",
							"WHERE\n",
							"    S.TransactionDateId NOT IN (20120229, 20160229)\n",
							"GROUP BY\n",
							"    P.ProductId\n",
							"    ,P.Seasonality\n",
							"    ,S.TransactionDateId\n",
							"\"\"\"\n",
							"\n",
							"prod_df = spark.sql(sqlQuery)\n",
							"prod_df.cache()"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"source": [
							"Check the number of records in the data frame (should be around 7.8 million rows)."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"prod_df.count()"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"source": [
							"Display some statistics about the data frame.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [
										"summary"
									],
									"values": [
										"summary"
									],
									"yLabel": "summary",
									"xLabel": "summary",
									"aggregation": "COUNT",
									"aggByBackend": false
								},
								"aggData": "{\"summary\":{\"count\":1,\"max\":1,\"mean\":1,\"min\":1,\"stddev\":1}}",
								"isSummary": false,
								"previewData": {
									"filter": null
								},
								"isSql": false
							}
						},
						"source": [
							"display(prod_df.describe())"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"source": [
							"Pivot the data frame to make daily sale items counts columns. \n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"prod_prep_df = prod_df.groupBy(['ProductId', 'Seasonality']).pivot('TransactionDateId').sum('TransactionItemsCount').toPandas()"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"source": [
							"Clean up the nulls and take a look at the result.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"prod_prep_df = prod_prep_df.fillna(0)\n",
							"prod_prep_df.head(10)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"source": [
							"Isloate features and prediction classes.\n",
							"\n",
							"Standardize features by removing the mean and scaling to unit variance.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"X = prod_prep_df.iloc[:, 2:].values\n",
							"y = prod_prep_df['Seasonality'].values\n",
							"\n",
							"X_scale = StandardScaler().fit_transform(X)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Use PCA for dimensionality reduction\n",
							"\n",
							"Perform dimensionality reduction using Principal Components Analysis and two target components.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"pca = PCA(n_components=2)\n",
							"principal_components = pca.fit_transform(X_scale)\n",
							"principal_components = MinMaxScaler().fit_transform(principal_components)\n",
							"\n",
							"pca_df = pd.DataFrame(data = principal_components, columns = ['pc1', 'pc2'])\n",
							"pca_df = pd.concat([pca_df, prod_prep_df[['Seasonality']]], axis = 1)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"source": [
							"Display the products data frame in two dimensions (mapped to the two principal components).\n",
							"\n",
							"Note the clear separation of clusters.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"fig = plt.figure(figsize = (6,6))\n",
							"ax = fig.add_subplot(1,1,1) \n",
							"ax.set_xlabel('Principal Component 1', fontsize = 15)\n",
							"ax.set_ylabel('Principal Component 2', fontsize = 15)\n",
							"ax.set_title('2 component PCA', fontsize = 20)\n",
							"targets = [1, 2, 3]\n",
							"colors = ['r', 'g', 'b']\n",
							"for target, color in zip(targets,colors):\n",
							"    indicesToKeep = pca_df['Seasonality'] == target\n",
							"    ax.scatter(pca_df.loc[indicesToKeep, 'pc1']\n",
							"               , pca_df.loc[indicesToKeep, 'pc2']\n",
							"               , c = color\n",
							"               , s = 1)\n",
							"ax.legend(['All Season Products', 'Summer Products', 'Winter Products'])\n",
							"ax.plot([-0.05, 1.05], [0.77, 1.0], linestyle=':', linewidth=1, color='y')\n",
							"ax.plot([-0.05, 1.05], [0.37, 0.6], linestyle=':', linewidth=1, color='y')\n",
							"ax.grid()\n",
							"\n",
							"plt.show()\n",
							"plt.close()"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"source": [
							"Redo the Principal Components Analysis, this time with twenty dimensions.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"def col_name(x):\n",
							"    return f'f{x:02}'\n",
							"\n",
							"pca = PCA(n_components=20)\n",
							"principal_components = pca.fit_transform(X_scale)\n",
							"principal_components = MinMaxScaler().fit_transform(principal_components)\n",
							"\n",
							"X = pd.DataFrame(data = principal_components, columns = list(map(col_name, np.arange(0, 20))))\n",
							"pca_df = pd.concat([X, prod_prep_df[['ProductId']]], axis = 1)\n",
							"pca_automl_df = pd.concat([X, prod_prep_df[['Seasonality']]], axis = 1)\n",
							"\n",
							"X = X[:4500]\n",
							"y = prod_prep_df['Seasonality'][:4500]\n",
							"pca_automl_df = pca_automl_df[:4500]"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"source": [
							"Save the PCA components to the SQL pool. - the `spark.sql.execution.arrow.fallback.enabled` warning can be safely ignored.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"pca_sdf = spark.createDataFrame(pca_df)\n",
							"pca_sdf.createOrReplaceTempView(\"productpca\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"%%spark\n",
							"// Make sure the name of the SQL pool (SQLPool01 below) matches the name of your SQL pool.\n",
							"val df = spark.sqlContext.sql(\"select * from productpca\")\n",
							"df.write.sqlanalytics(\"SQLPool01.wwi_ml.ProductPCA\", Constants.INTERNAL)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Train ensemble of trees classifier (using XGBoost)\n",
							"\n",
							"Split into test and training data sets.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=123)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"source": [
							"Train the ensemble classifier using XGBoost.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"model = XGBClassifier()\n",
							"model.fit(X_train, y_train)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"source": [
							"Perform predictions with the newly trained model.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"y_pred = model.predict(X_test)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"source": [
							"Calculate the accuracy of the model using test data.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"accuracy = accuracy_score(y_test, y_pred)\n",
							"print(\"Accuracy: %.2f%%\" % (accuracy * 100.0))"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"source": [
							"Convert trained model to ONNX format.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"initial_types = [\n",
							"    ('input', FloatTensorType([1, 20]))\n",
							"]\n",
							"\n",
							"onnx_model = convert_xgboost(model, initial_types=initial_types)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Train classifier using Auto ML\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"from azureml.core.experiment import Experiment\n",
							"from azureml.core.workspace import Workspace\n",
							"from azureml.train.automl.run import AutoMLRun\n",
							"from azureml.train.automl import AutoMLConfig\n",
							"from azureml.automl.runtime.onnx_convert import OnnxConverter"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"pca_automl_df.head(10)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"source": [
							"Configure the connection to the Azure Machine Learning workspace. The Azure portal provides all the values below.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"subscription_id='3941d4c0-fdec-4aa0-9d9a-80436df48f39'         # ensure it matches your Azure subscription id\n",
							"resource_group='Synapse-WS-L400-459930'      # ensure it matches your resource group name\n",
							"workspace_name='amlworkspace459930'       # ensure it matches your Azure Machine Learning workspace name\n",
							"ws = Workspace(subscription_id = subscription_id, resource_group = resource_group, workspace_name = workspace_name)\n",
							"ws.write_config()\n",
							"ws = Workspace.from_config()\n",
							"experiment = Experiment(ws, \"Product_Seasonality\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"source": [
							"Configure the Automated Machine Learning experiment and start it (will run on local compute resources).\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"automl_classifier_config = AutoMLConfig(\n",
							"        task='classification',\n",
							"        #experiment_exit_score = 0.995,\n",
							"        experiment_timeout_minutes=15,\n",
							"        enable_onnx_compatible_models=True,\n",
							"        training_data=pca_automl_df,\n",
							"        label_column_name='Seasonality',\n",
							"        n_cross_validations=5,\n",
							"        enable_voting_ensemble=False,\n",
							"        enable_stack_ensemble=False\n",
							"        )\n",
							"\n",
							"local_run = experiment.submit(automl_classifier_config, show_output=True)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"source": [
							"Retrieve the best model directly in ONNX format and take a look at it.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"best_run, onnx_model2 = local_run.get_output(return_onnx_model=True)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"outputCollapsed": true
						},
						"source": [
							"onnx_model2"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"source": [
							"Write the model to the data lake account"
						]
					},
					{
						"cell_type": "code",
						"source": [
							"modelPath = \"abfss://wwi-02@asadatalake459930.dfs.core.windows.net/ml/onnx/als_recommender.onnx\"\n",
							"modelString = str(onnx_model2.SerializeToString())\n",
							"mssparkutils.fs.put(modelPath, modelString)"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Lab 07 - Spark ML')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool01",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {}
				},
				"metadata": {
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/3941d4c0-fdec-4aa0-9d9a-80436df48f39/resourceGroups/Synapse-WS-L400-459930/providers/Microsoft.Synapse/workspaces/asaworkspace459930/bigDataPools/SparkPool01",
						"name": "SparkPool01",
						"type": "Spark",
						"endpoint": "https://asaworkspace459930.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool01",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					}
				},
				"cells": [
					{
						"cell_type": "markdown",
						"source": [
							"## Making Product Recommendations\n",
							"\n",
							"In this notebook, you will use sales data to create product recommendations for customers. \n",
							"\n",
							"When creating recommendation models there are generally two approaches that vary only on the data you use to compute the \"strength\" of a recommendation:\n",
							"- **Explicit ratings**: In this case, each user and product has a star rating attached. Think you might review restaurants in your favorite app.\n",
							"- **Implicit ratings**: In this case each user and product has a rating that is derived from some behavioral metric. Typically that metric is a count, like number purchases of that product or the number of product page views. The actual rating is \"implicit\" in the sense that it is computed algorithmically instead of directly using the value provided.\n",
							"\n",
							"In this notebook, you train a model that makes product recommendation based purchase history. For each user and product that appears in the history, you will sum the quantity of items purchased across each transaction. This sum will create an **explicit** rating for the user to product mapping, effectively your model is saying the more of a product a user buys across all transactions, the more relevant it is to that user.\n",
							"\n",
							"The model then goes one step further, and enables you to calculate the recommendations for a user, who may not have bought the product before, but because her purchases are similar to another's, she might like the strongest recommendations inferred from other users like her. Think of this as the algorthim filling in the blanks for the user and a given product, it predicts what that rating should be between them.\n",
							""
						]
					},
					{
						"cell_type": "markdown",
						"source": [
							"### Using Spark ML's ALS Algorithm\n",
							"The ALS, or [Alternating Least Squares algorithm](https://towardsdatascience.com/alternating-least-square-for-implicit-dataset-with-code-8e7999277f4b) is used to make recommendations based on implicit data. Implicit data (ratings) could mean the purchases a user has made, or user tracking on a website. If a user purchases product A frequently, then we implicitly know they must like that product.\n",
							"Run the following cell to import the ALS class.\n"
						]
					},
					{
						"cell_type": "code",
						"source": [
							"from pyspark.ml.recommendation import ALS\n",
							"from pyspark.sql import Row\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"source": [
							"Run the following cell to load the SaleSmall table from the SQL Pool. Make sure the SQL pool name (SQLPool01) matches the name of your SQL Pool.\n",
							"\n",
							"Remember, that in order to read from table like this, we need to use Scala to create a DataFrame around it.\n",
							"\n",
							"Once you have the DataFrame, you can create a named view from it. Since named views are registered in the shared metastore, you can access view by name from both Scala and Python cells.\n",
							"\n",
							"In this cell we use the Spark magic to run this cells content's using Scala, create the DataFrame and then register it as a view that we will use from later Python cells.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"%%spark\n",
							"// To be able to complete this lab in under an hour, let's just work with a sample 1.5 million rows\n",
							"val df = spark.read.sqlanalytics(\"SQLPool01.wwi.SaleSmall\").limit(1500000) \n",
							"df.createOrReplaceTempView(\"salessample\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"source": [
							"Next, you need to get just the data you need to train the recommender.\n",
							"\n",
							"A recommender really only operates on three fields: the customerid/userid, the itemid/productid and the rating.\n",
							"\n",
							"In the following cell, we select just those columns, summing the quantity field to get a toal purchase count for any given product by that user in the history. This field, which we alias as numpurchases, is our rating.\n",
							"\n",
							"Then we call `cache()` on the dataframe so that resultant dataset is cached in Spark memory (or disk) and does not have to be recomputed everytime we make a subequent query for it. Machine learning algorithms like ALS make several passes thru data, so caching the DataFrame provides a significant performance boost.\n",
							"\n",
							"Run the following cell to prepare and cached the implicit ratings (IR) table.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"ir = spark.sql(\"SELECT productid, customerid, SUM(quantity) as numpurchases FROM salessample GROUP BY productid, customerid\")\n",
							"ir.cache()\n",
							"display(ir)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"source": [
							"In training a model, we withold a subset of the data to use when evaluating the model. This is the test set. The train set is what we show to the algorithm for it to learn from.\n",
							"\n",
							"The basic idea is if you show the model all of the data you have, it may effectively memorize all the answers- meaning it will perform very well if it has seen the question before, but probably perform poorly against new questions. This problem that is avoided is called overfitting the model to the data.\n",
							"\n",
							"In the first line, we split our data into those train and test subsets.\n",
							"\n",
							"In the sceond line, we instantiate the ALS algorithm, telling it which columns in our data are the user, item and rating. THe `maxIter` controls how many passes the training takes over the data, and the `regParam` controls how big of an adjustment the model makes during each pass. These are set to the common defaults so you can ignore those values for the purposes of this lab. \n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"train, test = ir.randomSplit([0.7,0.3])\n",
							"als = ALS(maxIter=5,regParam=0.01,userCol=\"customerid\",itemCol=\"productid\",ratingCol=\"numpurchases\")\n",
							"model = als.fit(train)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"source": [
							"With a trained model in hand, we can now use it to make some recommendations. \n",
							"\n",
							"In reccommender systems it is very common to pre-compute the recommendations in batch and then simply query their reccommendations for a single customer later.\n",
							"\n",
							"Run the following cell to batch compute the top 5 product recommendations for each customer, and see a sampling of the result.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"product_recommendations = model.recommendForAllUsers(5).selectExpr(\"customerid\",\"explode(recommendations) as rec\")\n",
							"product_recommendations = product_recommendations.selectExpr(\"customerId\", \"rec.productid\", \"rec.rating\")\n",
							"product_recommendations.createOrReplaceTempView(\"recommendations\")\n",
							"display(product_recommendations)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"source": [
							"Now that you have the batch recommendations, save the results to a table in a SQL Pool by running the following cell. With this, downstream applications can look up recommendations by issuing a traditional T-SQL query.\n",
							"\n",
							"Don't forget to check the name of your SQL Pool used on Line 3.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"%%spark\n",
							"val recommendations = spark.sql(\"SELECT * from recommendations\")\n",
							"recommendations.write.sqlanalytics(\"SQLPool01.wwi.Recommendations\", Constants.INTERNAL) "
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asal400_notebook1')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool01",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1",
						"state": {
							"4f89bda4-da09-4776-8d3b-ada022869ef4": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"0": "bebd0650-b54f-43c4-bf18-f96fcc16fcf5",
												"1": "3",
												"2": "3208",
												"3": 4,
												"4": "33.860000000000000000",
												"5": "135.440000000000000000",
												"6": "20161231",
												"7": "43.200000000000000000",
												"8": 6,
												"9": 35,
												"10": "7374"
											},
											{
												"0": "bebd0650-b54f-43c4-bf18-f96fcc16fcf5",
												"1": "3",
												"2": "1820",
												"3": 4,
												"4": "28.650000000000000000",
												"5": "114.600000000000000000",
												"6": "20161231",
												"7": "35.680000000000000000",
												"8": 6,
												"9": 35,
												"10": "7374"
											},
											{
												"0": "bebd0650-b54f-43c4-bf18-f96fcc16fcf5",
												"1": "3",
												"2": "3372",
												"3": 2,
												"4": "23.040000000000000000",
												"5": "46.080000000000000000",
												"6": "20161231",
												"7": "13.060000000000000000",
												"8": 6,
												"9": 35,
												"10": "7374"
											},
											{
												"0": "bebd0650-b54f-43c4-bf18-f96fcc16fcf5",
												"1": "3",
												"2": "1373",
												"3": 3,
												"4": "34.650000000000000000",
												"5": "103.950000000000000000",
												"6": "20161231",
												"7": "31.020000000000000000",
												"8": 6,
												"9": 35,
												"10": "7374"
											},
											{
												"0": "bebd0650-b54f-43c4-bf18-f96fcc16fcf5",
												"1": "3",
												"2": "2760",
												"3": 1,
												"4": "36.130000000000000000",
												"5": "36.130000000000000000",
												"6": "20161231",
												"7": "7.250000000000000000",
												"8": 6,
												"9": 35,
												"10": "7374"
											},
											{
												"0": "bebd0650-b54f-43c4-bf18-f96fcc16fcf5",
												"1": "3",
												"2": "2253",
												"3": 4,
												"4": "26.800000000000000000",
												"5": "107.200000000000000000",
												"6": "20161231",
												"7": "28.000000000000000000",
												"8": 6,
												"9": 35,
												"10": "7374"
											},
											{
												"0": "bebd0650-b54f-43c4-bf18-f96fcc16fcf5",
												"1": "3",
												"2": "3498",
												"3": 4,
												"4": "25.080000000000000000",
												"5": "100.320000000000000000",
												"6": "20161231",
												"7": "28.680000000000000000",
												"8": 6,
												"9": 35,
												"10": "7374"
											},
											{
												"0": "bebd0650-b54f-43c4-bf18-f96fcc16fcf5",
												"1": "3",
												"2": "2358",
												"3": 3,
												"4": "23.290000000000000000",
												"5": "69.870000000000000000",
												"6": "20161231",
												"7": "24.930000000000000000",
												"8": 6,
												"9": 35,
												"10": "7374"
											},
											{
												"0": "bebd0650-b54f-43c4-bf18-f96fcc16fcf5",
												"1": "3",
												"2": "198",
												"3": 4,
												"4": "30.820000000000000000",
												"5": "123.280000000000000000",
												"6": "20161231",
												"7": "41.800000000000000000",
												"8": 6,
												"9": 35,
												"10": "7374"
											},
											{
												"0": "bebd0650-b54f-43c4-bf18-f96fcc16fcf5",
												"1": "3",
												"2": "190",
												"3": 1,
												"4": "24.650000000000000000",
												"5": "24.650000000000000000",
												"6": "20161231",
												"7": "6.700000000000000000",
												"8": 6,
												"9": 35,
												"10": "7374"
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "TransactionId",
												"type": "string"
											},
											{
												"key": "1",
												"name": "CustomerId",
												"type": "int"
											},
											{
												"key": "2",
												"name": "ProductId",
												"type": "smallint"
											},
											{
												"key": "3",
												"name": "Quantity",
												"type": "tinyint"
											},
											{
												"key": "4",
												"name": "Price",
												"type": "decimal"
											},
											{
												"key": "5",
												"name": "TotalAmount",
												"type": "decimal"
											},
											{
												"key": "6",
												"name": "TransactionDate",
												"type": "int"
											},
											{
												"key": "7",
												"name": "ProfitAmount",
												"type": "decimal"
											},
											{
												"key": "8",
												"name": "Hour",
												"type": "tinyint"
											},
											{
												"key": "9",
												"name": "Minute",
												"type": "tinyint"
											},
											{
												"key": "10",
												"name": "StoreId",
												"type": "smallint"
											}
										]
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "sum",
											"categoryFieldKeys": [
												"0"
											],
											"seriesFieldKeys": [
												"1"
											],
											"isStacked": false
										}
									}
								}
							},
							"e5b844fe-7f0a-4e03-b713-85f5a5affc2e": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"0": "20161231",
												"1": "3208",
												"2": "4341.600000000000000000",
												"3": "2.4364",
												"4": "402"
											},
											{
												"0": "20161231",
												"1": "1820",
												"2": "2809.800000000000000000",
												"3": "2.2993",
												"4": "315"
											},
											{
												"0": "20161231",
												"1": "3372",
												"2": "2442.220000000000000000",
												"3": "2.4605",
												"4": "374"
											},
											{
												"0": "20161231",
												"1": "1373",
												"2": "827.200000000000000000",
												"3": "2.5",
												"4": "80"
											},
											{
												"0": "20161231",
												"1": "2760",
												"2": "435.000000000000000000",
												"3": "2.7273",
												"4": "60"
											},
											{
												"0": "20161231",
												"1": "2253",
												"2": "2121.000000000000000000",
												"3": "2.3858",
												"4": "303"
											},
											{
												"0": "20161231",
												"1": "3498",
												"2": "3018.570000000000000000",
												"3": "2.4765",
												"4": "421"
											},
											{
												"0": "20161231",
												"1": "2358",
												"2": "448.740000000000000000",
												"3": "2.25",
												"4": "54"
											},
											{
												"0": "20161231",
												"1": "198",
												"2": "15560.050000000000000000",
												"3": "2.453",
												"4": "1489"
											},
											{
												"0": "20161231",
												"1": "190",
												"2": "7698.300000000000000000",
												"3": "2.559",
												"4": "1149"
											},
											{
												"0": "20161231",
												"1": "197",
												"2": "7499.400000000000000000",
												"3": "2.6174",
												"4": "1293"
											},
											{
												"0": "20161231",
												"1": "4393",
												"2": "2767.660000000000000000",
												"3": "2.6268",
												"4": "373"
											},
											{
												"0": "20161231",
												"1": "1965",
												"2": "4633.790000000000000000",
												"3": "2.4248",
												"4": "371"
											},
											{
												"0": "20161231",
												"1": "2128",
												"2": "2761.900000000000000000",
												"3": "2.3203",
												"4": "355"
											},
											{
												"0": "20161231",
												"1": "629",
												"2": "2927.520000000000000000",
												"3": "2.3108",
												"4": "342"
											},
											{
												"0": "20161231",
												"1": "1584",
												"2": "477.300000000000000000",
												"3": "2.5517",
												"4": "74"
											},
											{
												"0": "20161231",
												"1": "1155",
												"2": "475.440000000000000000",
												"3": "2.0741",
												"4": "56"
											},
											{
												"0": "20161231",
												"1": "553",
												"2": "328.160000000000000000",
												"3": "2.4348",
												"4": "56"
											},
											{
												"0": "20161231",
												"1": "266",
												"2": "2798.500000000000000000",
												"3": "2.3577",
												"4": "290"
											},
											{
												"0": "20161231",
												"1": "1039",
												"2": "2397.600000000000000000",
												"3": "2.368",
												"4": "296"
											},
											{
												"0": "20161231",
												"1": "3860",
												"2": "2401.980000000000000000",
												"3": "2.3902",
												"4": "294"
											},
											{
												"0": "20161231",
												"1": "4006",
												"2": "2498.300000000000000000",
												"3": "2.4472",
												"4": "301"
											},
											{
												"0": "20161231",
												"1": "3432",
												"2": "592.040000000000000000",
												"3": "2.6207",
												"4": "76"
											},
											{
												"0": "20161231",
												"1": "196",
												"2": "9050.360000000000000000",
												"3": "2.4758",
												"4": "1228"
											},
											{
												"0": "20161231",
												"1": "213",
												"2": "8249.640000000000000000",
												"3": "2.4341",
												"4": "1127"
											},
											{
												"0": "20161231",
												"1": "175",
												"2": "13563.250000000000000000",
												"3": "2.5264",
												"4": "1195"
											},
											{
												"0": "20161231",
												"1": "227",
												"2": "12250.630000000000000000",
												"3": "2.5032",
												"4": "1159"
											},
											{
												"0": "20161231",
												"1": "171",
												"2": "9722.700000000000000000",
												"3": "2.4894",
												"4": "1170"
											},
											{
												"0": "20161231",
												"1": "956",
												"2": "2564.620000000000000000",
												"3": "2.6467",
												"4": "397"
											},
											{
												"0": "20161231",
												"1": "2790",
												"2": "2499.100000000000000000",
												"3": "2.5573",
												"4": "335"
											},
											{
												"0": "20161231",
												"1": "2592",
												"2": "495.880000000000000000",
												"3": "2.4839",
												"4": "77"
											},
											{
												"0": "20161231",
												"1": "3158",
												"2": "2358.000000000000000000",
												"3": "2.5032",
												"4": "393"
											},
											{
												"0": "20161231",
												"1": "242",
												"2": "8198.200000000000000000",
												"3": "2.5276",
												"4": "1145"
											},
											{
												"0": "20161231",
												"1": "162",
												"2": "13232.520000000000000000",
												"3": "2.5228",
												"4": "1602"
											},
											{
												"0": "20161231",
												"1": "63",
												"2": "14384.340000000000000000",
												"3": "2.4703",
												"4": "1413"
											},
											{
												"0": "20161231",
												"1": "192",
												"2": "10799.360000000000000000",
												"3": "2.3833",
												"4": "1144"
											},
											{
												"0": "20161231",
												"1": "241",
												"2": "10075.390000000000000000",
												"3": "2.5372",
												"4": "1261"
											},
											{
												"0": "20161231",
												"1": "1497",
												"2": "2825.320000000000000000",
												"3": "2.5152",
												"4": "332"
											},
											{
												"0": "20161231",
												"1": "3804",
												"2": "2935.620000000000000000",
												"3": "2.6288",
												"4": "347"
											},
											{
												"0": "20161231",
												"1": "3145",
												"2": "2909.040000000000000000",
												"3": "2.6242",
												"4": "391"
											},
											{
												"0": "20161231",
												"1": "94",
												"2": "10785.600000000000000000",
												"3": "2.5176",
												"4": "1284"
											},
											{
												"0": "20161231",
												"1": "3940",
												"2": "424.620000000000000000",
												"3": "2.2105",
												"4": "42"
											},
											{
												"0": "20161231",
												"1": "3407",
												"2": "2305.840000000000000000",
												"3": "2.5299",
												"4": "296"
											},
											{
												"0": "20161231",
												"1": "4564",
												"2": "325.440000000000000000",
												"3": "2.2857",
												"4": "48"
											},
											{
												"0": "20161231",
												"1": "157",
												"2": "8593.600000000000000000",
												"3": "2.5338",
												"4": "1310"
											},
											{
												"0": "20161231",
												"1": "812",
												"2": "2592.000000000000000000",
												"3": "2.5175",
												"4": "360"
											},
											{
												"0": "20161231",
												"1": "2994",
												"2": "3434.760000000000000000",
												"3": "2.6532",
												"4": "329"
											},
											{
												"0": "20161231",
												"1": "3606",
												"2": "2591.020000000000000000",
												"3": "2.6403",
												"4": "367"
											},
											{
												"0": "20161231",
												"1": "1399",
												"2": "669.330000000000000000",
												"3": "2.3103",
												"4": "67"
											},
											{
												"0": "20161231",
												"1": "2463",
												"2": "627.000000000000000000",
												"3": "2.5",
												"4": "75"
											},
											{
												"0": "20161231",
												"1": "107",
												"2": "8188.080000000000000000",
												"3": "2.5603",
												"4": "1252"
											},
											{
												"0": "20161231",
												"1": "2949",
												"2": "3074.500000000000000000",
												"3": "2.4432",
												"4": "430"
											},
											{
												"0": "20161231",
												"1": "4692",
												"2": "2157.400000000000000000",
												"3": "2.5556",
												"4": "322"
											},
											{
												"0": "20161231",
												"1": "4469",
												"2": "2542.320000000000000000",
												"3": "2.3955",
												"4": "321"
											},
											{
												"0": "20161231",
												"1": "2265",
												"2": "2542.000000000000000000",
												"3": "2.4118",
												"4": "328"
											},
											{
												"0": "20161231",
												"1": "1194",
												"2": "238.640000000000000000",
												"3": "2.1111",
												"4": "38"
											},
											{
												"0": "20161231",
												"1": "71",
												"2": "11474.430000000000000000",
												"3": "2.4028",
												"4": "1199"
											},
											{
												"0": "20161231",
												"1": "137",
												"2": "6336.480000000000000000",
												"3": "2.532",
												"4": "1228"
											},
											{
												"0": "20161231",
												"1": "34",
												"2": "8444.740000000000000000",
												"3": "2.5501",
												"4": "1349"
											},
											{
												"0": "20161231",
												"1": "78",
												"2": "11127.660000000000000000",
												"3": "2.3975",
												"4": "1146"
											},
											{
												"0": "20161231",
												"1": "10",
												"2": "4177.080000000000000000",
												"3": "2.4662",
												"4": "1132"
											},
											{
												"0": "20161231",
												"1": "50",
												"2": "10081.540000000000000000",
												"3": "2.4437",
												"4": "1498"
											},
											{
												"0": "20161231",
												"1": "99",
												"2": "9408.000000000000000000",
												"3": "2.5052",
												"4": "1200"
											},
											{
												"0": "20161231",
												"1": "28",
												"2": "8334.890000000000000000",
												"3": "2.5137",
												"4": "1189"
											},
											{
												"0": "20161231",
												"1": "24",
												"2": "11786.720000000000000000",
												"3": "2.5398",
												"4": "1628"
											},
											{
												"0": "20161231",
												"1": "2893",
												"2": "3918.600000000000000000",
												"3": "2.5301",
												"4": "420"
											},
											{
												"0": "20161231",
												"1": "53",
												"2": "13700.160000000000000000",
												"3": "2.5244",
												"4": "1704"
											},
											{
												"0": "20161231",
												"1": "2733",
												"2": "1653.760000000000000000",
												"3": "2.432",
												"4": "304"
											},
											{
												"0": "20161231",
												"1": "4495",
												"2": "2102.220000000000000000",
												"3": "2.25",
												"4": "306"
											},
											{
												"0": "20161231",
												"1": "1427",
												"2": "3135.630000000000000000",
												"3": "2.54",
												"4": "381"
											},
											{
												"0": "20161231",
												"1": "2169",
												"2": "316.800000000000000000",
												"3": "2.3913",
												"4": "55"
											},
											{
												"0": "20161231",
												"1": "2815",
												"2": "342.570000000000000000",
												"3": "2.85",
												"4": "57"
											},
											{
												"0": "20161231",
												"1": "4912",
												"2": "522.600000000000000000",
												"3": "2.3214",
												"4": "65"
											},
											{
												"0": "20161231",
												"1": "313",
												"2": "2638.220000000000000000",
												"3": "2.4821",
												"4": "278"
											},
											{
												"0": "20161231",
												"1": "3092",
												"2": "3017.600000000000000000",
												"3": "2.5949",
												"4": "410"
											},
											{
												"0": "20161231",
												"1": "950",
												"2": "2221.230000000000000000",
												"3": "2.5743",
												"4": "381"
											},
											{
												"0": "20161231",
												"1": "4947",
												"2": "718.080000000000000000",
												"3": "2.4286",
												"4": "51"
											},
											{
												"0": "20161231",
												"1": "146",
												"2": "5847.660000000000000000",
												"3": "2.4738",
												"4": "1274"
											},
											{
												"0": "20161231",
												"1": "106",
												"2": "14920.810000000000000000",
												"3": "2.4728",
												"4": "1543"
											},
											{
												"0": "20161231",
												"1": "5",
												"2": "10799.350000000000000000",
												"3": "2.5046",
												"4": "1355"
											},
											{
												"0": "20161231",
												"1": "170",
												"2": "7765.860000000000000000",
												"3": "2.4116",
												"4": "1119"
											},
											{
												"0": "20161231",
												"1": "120",
												"2": "13827.240000000000000000",
												"3": "2.5246",
												"4": "1593"
											},
											{
												"0": "20161231",
												"1": "91",
												"2": "11856.240000000000000000",
												"3": "2.5223",
												"4": "1188"
											},
											{
												"0": "20161231",
												"1": "217",
												"2": "16449.530000000000000000",
												"3": "2.5034",
												"4": "1457"
											},
											{
												"0": "20161231",
												"1": "4337",
												"2": "2874.720000000000000000",
												"3": "2.5489",
												"4": "339"
											},
											{
												"0": "20161231",
												"1": "3750",
												"2": "2188.800000000000000000",
												"3": "2.3226",
												"4": "288"
											},
											{
												"0": "20161231",
												"1": "3069",
												"2": "555.000000000000000000",
												"3": "2.5517",
												"4": "74"
											},
											{
												"0": "20161231",
												"1": "1981",
												"2": "433.840000000000000000",
												"3": "2.72",
												"4": "68"
											},
											{
												"0": "20161231",
												"1": "967",
												"2": "1513.800000000000000000",
												"3": "2.2308",
												"4": "261"
											},
											{
												"0": "20161231",
												"1": "2214",
												"2": "2822.250000000000000000",
												"3": "2.5357",
												"4": "355"
											},
											{
												"0": "20161231",
												"1": "4060",
												"2": "298.850000000000000000",
												"3": "2.5294",
												"4": "43"
											},
											{
												"0": "20161231",
												"1": "144",
												"2": "9263.050000000000000000",
												"3": "2.522",
												"4": "1145"
											},
											{
												"0": "20161231",
												"1": "224",
												"2": "15037.590000000000000000",
												"3": "2.4588",
												"4": "1163"
											},
											{
												"0": "20161231",
												"1": "221",
												"2": "8923.200000000000000000",
												"3": "2.5366",
												"4": "1144"
											},
											{
												"0": "20161231",
												"1": "206",
												"2": "10596.040000000000000000",
												"3": "2.4635",
												"4": "1148"
											},
											{
												"0": "20161231",
												"1": "3918",
												"2": "2415.080000000000000000",
												"3": "2.3741",
												"4": "349"
											},
											{
												"0": "20161231",
												"1": "2330",
												"2": "3508.380000000000000000",
												"3": "2.5029",
												"4": "438"
											},
											{
												"0": "20161231",
												"1": "3259",
												"2": "2484.300000000000000000",
												"3": "2.549",
												"4": "390"
											},
											{
												"0": "20161231",
												"1": "1533",
												"2": "2393.340000000000000000",
												"3": "2.5489",
												"4": "339"
											},
											{
												"0": "20161231",
												"1": "1842",
												"2": "528.660000000000000000",
												"3": "2.75",
												"4": "66"
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "TransactionDate",
												"type": "int"
											},
											{
												"key": "1",
												"name": "ProductId",
												"type": "smallint"
											},
											{
												"key": "2",
												"name": "(sum)ProfitAmount",
												"type": "decimal"
											},
											{
												"key": "3",
												"name": "(avg)Quantity",
												"type": "double"
											},
											{
												"key": "4",
												"name": "(sum)Quantity",
												"type": "bigint"
											}
										]
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "sum",
											"categoryFieldKeys": [
												"1"
											],
											"seriesFieldKeys": [
												"0"
											],
											"isStacked": false
										}
									}
								}
							}
						}
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/3941d4c0-fdec-4aa0-9d9a-80436df48f39/resourceGroups/Synapse-WS-L400-459930/providers/Microsoft.Synapse/workspaces/asaworkspace459930/bigDataPools/SparkPool01",
						"name": "SparkPool01",
						"type": "Spark",
						"endpoint": "https://asaworkspace459930.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool01",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\r\n",
							"df = spark.read.load('abfss://wwi-02@asadatalake459930.dfs.core.windows.net/sale-small/Year=2016/Quarter=Q4/Month=12/Day=20161231/sale-small-20161231-snappy.parquet', format='parquet')\r\n",
							"display(df.limit(10))"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df.printSchema()"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from pyspark.sql import SparkSession\r\n",
							"from pyspark.sql.types import *\r\n",
							"from pyspark.sql.functions import *\r\n",
							"\r\n",
							"profitByDateProduct = (df.groupBy(\"TransactionDate\",\"ProductId\")\r\n",
							"    .agg(\r\n",
							"        sum(\"ProfitAmount\").alias(\"(sum)ProfitAmount\"),\r\n",
							"        round(avg(\"Quantity\"), 4).alias(\"(avg)Quantity\"),\r\n",
							"        sum(\"Quantity\").alias(\"(sum)Quantity\"))\r\n",
							"    .orderBy(\"TransactionDate\"))\r\n",
							"profitByDateProduct.show(100)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"display(profitByDateProduct.limit(100))"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df = (spark.read \\\r\n",
							"        .option(\"inferSchema\", \"true\") \\\r\n",
							"        .json(\"abfss://wwi-02@asadatalake459930.dfs.core.windows.net/online-user-profiles-02/*.json\", multiLine=True)\r\n",
							"    )\r\n",
							"\r\n",
							"df.printSchema()"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df.createOrReplaceTempView(\"user_profiles\")"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"\r\n",
							"SELECT * FROM user_profiles LIMIT 10"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"flat=df.select('visitorId',explode('topProductPurchases').alias('topProductPurchases_flat'))\r\n",
							"flat.show(100)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"topPurchases = (flat.select('visitorId','topProductPurchases_flat.productId','topProductPurchases_flat.itemsPurchasedLast12Months')\r\n",
							"    .orderBy('visitorId'))\r\n",
							"\r\n",
							"topPurchases.show(100)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sortedTopPurchases = topPurchases.orderBy(\"itemsPurchasedLast12Months\")\r\n",
							"\r\n",
							"sortedTopPurchases.show(100)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sortedTopPurchases=topPurchases.orderBy(col(\"itemsPurchasedLast12Months\").desc())\r\n",
							"sortedTopPurchases.show(100)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 18
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"groupedTopPurchases = (sortedTopPurchases.select(\"visitorId\")\r\n",
							"    .groupBy(\"visitorId\")\r\n",
							"    .agg(count(\"*\").alias(\"total\"))\r\n",
							"    .orderBy(\"visitorId\") )\r\n",
							"\r\n",
							"groupedTopPurchases.show(100)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 19
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"groupedTopPurchases = (sortedTopPurchases.select(\"visitorId\",\"itemsPurchasedLast12Months\")\r\n",
							"    .groupBy(\"visitorId\")\r\n",
							"    .agg(sum(\"itemsPurchasedLast12Months\").alias(\"totalItemsPurchased\"))\r\n",
							"    .orderBy(\"visitorId\") )\r\n",
							"\r\n",
							"groupedTopPurchases.show(100)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 20
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQLPool01')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"restorePointInTime": "0001-01-01T00:00:00",
				"annotations": []
			},
			"dependsOn": [],
			"location": "eastus"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks",
			"apiVersion": "2019-06-01-preview",
			"properties": {},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default/synapse-ws-custstgacct--esbtestsynapse01-adlsesbtest')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"privateLinkResourceId": "/subscriptions/2cb4e37d-e888-4d54-ab4c-4faea330473f/resourceGroups/synapse/providers/Microsoft.Storage/storageAccounts/adlsesbtest",
				"groupId": "dfs"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default/synapse-ws-sql--esbtestsynapse01')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"privateLinkResourceId": "/subscriptions/2cb4e37d-e888-4d54-ab4c-4faea330473f/resourceGroups/synapse/providers/Microsoft.Synapse/workspaces/esbtestsynapse01",
				"groupId": "sql",
				"fqdns": [
					"esbtestsynapse01.489eae4b-2737-4f5e-ba78-a44ed132fb09.sql.azuresynapse.net"
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default/synapse-ws-sqlOnDemand--esbtestsynapse01')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"privateLinkResourceId": "/subscriptions/2cb4e37d-e888-4d54-ab4c-4faea330473f/resourceGroups/synapse/providers/Microsoft.Synapse/workspaces/esbtestsynapse01",
				"groupId": "sqlOnDemand",
				"fqdns": [
					"esbtestsynapse01-ondemand.489eae4b-2737-4f5e-ba78-a44ed132fb09.sql.azuresynapse.net"
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		}
	]
}